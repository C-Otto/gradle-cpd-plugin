package de.aaschmid.gradle.plugins.cpd

import de.aaschmid.gradle.plugins.cpd.internal.CpdReportsImpl
import org.gradle.api.GradleException
import org.gradle.api.file.FileCollection
import org.gradle.api.internal.project.IsolatedAntBuilder
import org.gradle.api.reporting.Reporting
import org.gradle.api.tasks.InputFiles
import org.gradle.api.tasks.Nested
import org.gradle.api.tasks.SourceTask
import org.gradle.api.tasks.TaskAction
import org.gradle.api.tasks.VerificationTask
import org.gradle.internal.reflect.Instantiator
import org.gradle.logging.ConsoleRenderer

import javax.inject.Inject


/**
 * Runs static copy & paste detection on source code files and generates a report of found duplications.
 * <p>
 * Copied partly from {@link org.gradle.api.plugins.quality.PmdPlugin} and adjusted
 *
 * @see CpdPlugin
 */
class Cpd extends SourceTask implements VerificationTask, Reporting<CpdReports> {

    /**
     * The class path containing the PMD library which contains the CPD library to be used.
     */
    @InputFiles
    FileCollection classpath

    @Nested
    private final CpdReports reports

    private final IsolatedAntBuilder antBuilder

    /**
     * Whether or not to allow the build to continue if there are warnings.
     *
     * Example: ignoreFailures = true
     */
    boolean ignoreFailures

    @Inject
    def Cpd(Instantiator instantiator, IsolatedAntBuilder antBuilder) {
        this.reports = instantiator.newInstance(CpdReportsImpl, this)
        this.antBuilder = antBuilder
    }

    @TaskAction
    void run() {
        // TODO
    }

    /**
     * Configures the reports to be generated by this task.
     */
    CpdReports reports(Closure closure) {
        reports.configure(closure)
    }

    /**
     * Returns the reports to be generated by this task.
     */
    CpdReports getReports() {
        reports
    }
}

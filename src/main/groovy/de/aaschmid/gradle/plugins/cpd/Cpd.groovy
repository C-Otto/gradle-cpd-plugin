package de.aaschmid.gradle.plugins.cpd

import de.aaschmid.gradle.plugins.cpd.internal.CpdReportsImpl
import org.gradle.api.GradleException
import org.gradle.api.Incubating
import org.gradle.api.file.FileCollection
import org.gradle.api.internal.project.IsolatedAntBuilder
import org.gradle.api.reporting.Reporting
import org.gradle.api.tasks.Input
import org.gradle.api.tasks.InputFiles
import org.gradle.api.tasks.Nested
import org.gradle.api.tasks.SourceTask
import org.gradle.api.tasks.TaskAction
import org.gradle.api.tasks.VerificationTask
import org.gradle.internal.reflect.Instantiator

import javax.inject.Inject


/**
 * Runs static code/paste (= duplication) detection on supplied source code files and generates a report of duplications
 * found.
 * <p>
 * Sample:
 *
 * <pre autoTested=''>
 * apply plugin: 'cpd'
 *
 * task cpd(type: Cpd, description: 'Copy/Paste detection for all Ruby scripts') {
 *
 *     // set minimum token count causing a duplication warning
 *     minimumTokenCount = 10
 *
 *     // enable CSV reports and customize destination, disable xml report
 *     reports {
 *         csv {
 *             enabled = true
 *             destination = file("${buildDir}/cpd.csv")
 *         }
 *         xml.enabled = false
 *     }
 *
 *     // explicitly include all Ruby files and exclude tests
 *     include '**.rb'
 *     exclude '**Test*'
 *
 *     // set source for running duplication check on
 *     source = files('src/ruby')
 * }
 * </pre>
 *
 * @see CpdPlugin
 */
@Incubating
class Cpd extends SourceTask implements VerificationTask, Reporting<CpdReports> {

    private final IsolatedAntBuilder antBuilder

    /**
     * The character set encoding (e.g., UTF-8) to use when reading the source code files but also when producing the
     * report.
     * <p>
     * Example: {@code encoding = UTF-8}
     */
    @Input
    String encoding

    @Nested
    private final CpdReportsImpl reports

    /**
     * <b>NOT SUPPORTED currently!</b>
     * <p>
     * Whether or not to allow the build to continue if there are warnings.
     * <p>
     * Example: {@code ignoreFailures = true}
     */
//    @Input
    boolean ignoreFailures

    /**
     * A positive integer indicating the minimum token count to trigger a CPD match.
     * <p>
     * Example: {@code minimumTokenCount = 25}
     */
    @Input
    int minimumTokenCount

    /**
     * The class path containing the PMD library which contains the CPD library to be used.
     */
    @InputFiles
    FileCollection pmdClasspath

    @Inject
    Cpd(Instantiator instantiator, IsolatedAntBuilder antBuilder) {
        this.reports = instantiator.newInstance(CpdReportsImpl, this)
        this.antBuilder = antBuilder
    }

    @TaskAction
    void run() {
        def cpdArgs = [
                // use getter to access properties that they are resolved correctly using conventionMapping
                minimumtokencount: getMinimumTokenCount(),
        ]
        if (getEncoding()) {
            cpdArgs += [ encoding: getEncoding() ]
        }

        if (reports.enabled.isEmpty() || reports.enabled.size() > 1) {
            throw new GradleException("Task '${name}' requires exactly one report to be enabled but was: ${reports.enabled*.name}.")
        } else {
            cpdArgs += [ format: reports.firstEnabled.name, outputfile: reports.firstEnabled.destination ]
        }

        antBuilder.withClasspath(getPmdClasspath()).execute{
            ant.taskdef(name: 'cpd', classname: 'net.sourceforge.pmd.cpd.CPDTask')

            if (logger.debugEnabled) {
                logger.debug("Starting CPD by 'ant.cpd' using ${cpdArgs} ...")
            }
            ant.cpd(cpdArgs){
                getSource().addToAntBuilder(ant, 'fileset', FileCollection.AntType.FileSet)
            }
        }
    }

    /**
     * Configures the reports to be generated by this task.
     */
    CpdReports reports(Closure closure) {
        return reports.configure(closure)
    }

    /**
     * Returns the reports to be generated by this task.
     */
    CpdReports getReports() {
        return reports
    }

    void setIgnoreFailures(boolean ignoreFailures) {
        if (logger.isLifecycleEnabled()) {
            logger.lifecycle("Property 'ignoreFailures' of task 'cpd' has no effect because it is not support in this version.")
        }
        this.ignoreFailures = ignoreFailures
    }
}

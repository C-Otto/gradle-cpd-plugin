apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'jacoco'

description = 'Gradle plugin to find duplicate code using PMDs copy/paste detection (= CPD)'
group = 'de.aaschmid.gradle.plugins'
version = '0.1'

sourceCompatibility = '1.6'

repositories {
    mavenCentral()
}

configurations {
    provided
}

sourceSets {
    main.compileClasspath += configurations.provided
    test.compileClasspath += configurations.provided
}

dependencies {
    provided 'javax.inject:javax.inject:1'

    compile gradleApi()
    compile localGroovy()

    testCompile 'org.spockframework:spock-core:0.7-groovy-1.8'
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.10'
}

jar {
    manifest {
        attributes (
            'Built-By': "Gradle ${gradle.gradleVersion}",
            'Built-Date': new Date(),
            'Specification-Title': 'gradle-cpd-plugin',
            'Specification-Version': version,
            'Specification-Vendor': 'Andreas Schmid, service@aaschmid.de',
            'Implementation-Title': 'gradle-cpd-plugin',
            'Implementation-Version': version,
            'Implementation-Vendor': 'Andreas Schmid, service@aaschmid.de',
        )
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

test {
    ignoreFailures = true
}

jacoco {
    toolVersion = '0.6.5.201403032054'
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

// -- build and publish artifacts -------------------------------------------------------------------------------------

apply plugin: 'maven'
apply plugin: 'signing'


signing {
    // requires gradle.properties, see http://www.gradle.org/docs/current/userguide/signing_plugin.html
    required {
        gradle.taskGraph.hasTask('uploadArchives')
    }
    sign configurations.archives
}

if (!hasProperty('sonatypeUsername')) {
	ext.sonatypeUsername = ''
}
if (!hasProperty('sonatypePassword')) {
	ext.sonatypePassword = ''
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { deployment ->
                signing.signPom(deployment)
            }
            repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                // username and password from gradle.properties
                authentication(userName: sonatypeUsername, password: sonatypePassword )
            }
            snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                authentication(userName: sonatypeUsername, password: sonatypePassword )
            }

            pom {
                project {
                    name 'gradle-cpd-plugin'
                    packaging 'jar'
                    description project.description
                    url 'https://github.com/aaschmid/gradle-cpd-plugin'

                    scm {
                        url 'scm:git@github.com:aaschmid/gradle-cpd-plugin.git'
                        connection 'scm:git@github.com:aaschmid/gradle-cpd-plugin.git'
                        developerConnection 'scm:git@github.com:aaschmid/gradle-cpd-plugin.git'
                    }

                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'aaschmid'
                            name 'Andreas Schmid'
                        }
                    }
                }
                whenConfigured { pom ->
                    pom.dependencies.removeAll(pom.dependencies.findAll{ dep -> dep.scope in [ 'compile', 'test' ] })
                }
            }
        }
    }
}
